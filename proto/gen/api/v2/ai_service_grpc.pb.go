// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v2/ai_service.proto

package apiv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AiService_AiChat_FullMethodName = "/memos.api.v2.AiService/AiChat"
)

// AiServiceClient is the client API for AiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiServiceClient interface {
	AiChat(ctx context.Context, in *AiRequest, opts ...grpc.CallOption) (*AIResponse, error)
}

type aiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAiServiceClient(cc grpc.ClientConnInterface) AiServiceClient {
	return &aiServiceClient{cc}
}

func (c *aiServiceClient) AiChat(ctx context.Context, in *AiRequest, opts ...grpc.CallOption) (*AIResponse, error) {
	out := new(AIResponse)
	err := c.cc.Invoke(ctx, AiService_AiChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiServiceServer is the server API for AiService service.
// All implementations must embed UnimplementedAiServiceServer
// for forward compatibility
type AiServiceServer interface {
	AiChat(context.Context, *AiRequest) (*AIResponse, error)
	mustEmbedUnimplementedAiServiceServer()
}

// UnimplementedAiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAiServiceServer struct {
}

func (UnimplementedAiServiceServer) AiChat(context.Context, *AiRequest) (*AIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AiChat not implemented")
}
func (UnimplementedAiServiceServer) mustEmbedUnimplementedAiServiceServer() {}

// UnsafeAiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiServiceServer will
// result in compilation errors.
type UnsafeAiServiceServer interface {
	mustEmbedUnimplementedAiServiceServer()
}

func RegisterAiServiceServer(s grpc.ServiceRegistrar, srv AiServiceServer) {
	s.RegisterService(&AiService_ServiceDesc, srv)
}

func _AiService_AiChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServiceServer).AiChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiService_AiChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServiceServer).AiChat(ctx, req.(*AiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AiService_ServiceDesc is the grpc.ServiceDesc for AiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "memos.api.v2.AiService",
	HandlerType: (*AiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AiChat",
			Handler:    _AiService_AiChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/ai_service.proto",
}
